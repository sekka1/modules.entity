// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package io.algorithms.entity;

import io.algorithms.entity.UserDataOnDemand;
import io.algorithms.entity.UserEntity;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect UserDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserDataOnDemand: @Component;
    
    private Random UserDataOnDemand.rnd = new SecureRandom();
    
    private List<UserEntity> UserDataOnDemand.data;
    
    public UserEntity UserDataOnDemand.getNewTransientUserEntity(int index) {
        UserEntity obj = new UserEntity();
        setCreateTime(obj, index);
        setDescription(obj, index);
        setLastModifiedTime(obj, index);
        setLastModifiedUserUri(obj, index);
        setName(obj, index);
        setOwnerGroupUri(obj, index);
        setOwnerUri(obj, index);
        setParentGroupUri(obj, index);
        setUri(obj, index);
        return obj;
    }
    
    public void UserDataOnDemand.setCreateTime(UserEntity obj, int index) {
        Date createTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreateTime(createTime);
    }
    
    public void UserDataOnDemand.setDescription(UserEntity obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void UserDataOnDemand.setLastModifiedTime(UserEntity obj, int index) {
        Date lastModifiedTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setLastModifiedTime(lastModifiedTime);
    }
    
    public void UserDataOnDemand.setLastModifiedUserUri(UserEntity obj, int index) {
        String lastModifiedUserUri = "lastModifiedUserUri_" + index;
        obj.setLastModifiedUserUri(lastModifiedUserUri);
    }
    
    public void UserDataOnDemand.setName(UserEntity obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void UserDataOnDemand.setOwnerGroupUri(UserEntity obj, int index) {
        String ownerGroupUri = "ownerGroupUri_" + index;
        obj.setOwnerGroupUri(ownerGroupUri);
    }
    
    public void UserDataOnDemand.setOwnerUri(UserEntity obj, int index) {
        String ownerUri = "ownerUri_" + index;
        obj.setOwnerUri(ownerUri);
    }
    
    public void UserDataOnDemand.setParentGroupUri(UserEntity obj, int index) {
        String parentGroupUri = "parentGroupUri_" + index;
        obj.setParentGroupUri(parentGroupUri);
    }
    
    public void UserDataOnDemand.setUri(UserEntity obj, int index) {
        String uri = "uri_" + index;
        obj.setUri(uri);
    }
    
    public UserEntity UserDataOnDemand.getSpecificUserEntity(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UserEntity obj = data.get(index);
        Long id = obj.getId();
        return UserEntity.findUserEntity(id);
    }
    
    public UserEntity UserDataOnDemand.getRandomUserEntity() {
        init();
        UserEntity obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return UserEntity.findUserEntity(id);
    }
    
    public boolean UserDataOnDemand.modifyUserEntity(UserEntity obj) {
        return false;
    }
    
    public void UserDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = UserEntity.findUserEntityEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UserEntity' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UserEntity>();
        for (int i = 0; i < 10; i++) {
            UserEntity obj = getNewTransientUserEntity(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
